#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  care_mopac_calc.py
#  
#  Copyright 2016 Carlos Eduardo Sequeiros Borja <casebor@gmail.com>
#  
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#  
#  

import os
import subprocess
import argparse

def trajectory_splitter(traj_file):	# Split a trajectory (multi-PDB) file
    new_text = ""
    models = 1
    for line in traj_file:
	line = line.strip()
	if line == "ENDMDL":
	    output = open("complex_" + str(models) + ".pdb", "w")
	    output.write(new_text.strip())
	    output.close()
	    models += 1
	    new_text = ""
	else:
	    new_text += line + "\n"
    print "\n\n\nPlease wait! We are working for you!\n\n\n"
    return models

def create_mop_files(qmMethod, charge, models):
    """ Function doc
    """
    for model in range(1, models):

	string  = ''
	string += '* ===============================\n'       
	string += '* Input file for Mopac\n'
	string += '* ===============================\n'
	string += qmMethod+" CHARGE="+str(charge)+" Singlet AUX 1SCF MOZYME"
	#string += qmMethod+" Singlet AUX 1SCF MOZYME"
	string += '\n\n'
	string += 'Mopac file generated by trajectoryEnergy\n'

	for line in open("complex_" + str(model) + ".pdb", "r"):
	    line1 = line.split()
	    typeA   = line[0:6]
	    x       = line[31:37]
	    y       = line[39:45]
	    z       = line[47:53]
	    atomT   = line[77:78]
	    if typeA == "ATOM  ":
		string += "%s %s	1 %s	1 %s	1\n" % (str(atomT),str(x),str(y),str(z))
	    else:
		pass
	mopOut = open('complex_'+qmMethod+'_'+str(model)+'.mop', 'w')
	mopOut.writelines(string)
	mopOut.close()
	string = ''

def mopac_energy(qmMethod, models):
    for model in range(1, models):
	command   = 'mopac complex_'+qmMethod+'_'+str(model)+'.mop'
	null_file = open(os.devnull, 'w')
	#subprocess.call(command.split(), stdout = null_file, stderr = null_file)

def write_results(qmMethod, models):
    """ Function doc
    """
    heat_form = []
    total_en = []
    elect_en = []
    core_core_rep = []
    cosmo_area = []
    ion_poten = []
    for model in range(1, models):
	for line in open('complex_'+qmMethod+'_'+str(model)+'.out', 'r'):
	    line1 = line.split()
	    if line[10:33] == 'FINAL HEAT OF FORMATION':
		energy = "%s	%s %s\n"% (str(model), line1[2], line1[3])
		heat_form.append(energy)
	    if line[10:22] == 'TOTAL ENERGY':
		energy = "%s	%s %s\n"% (str(model), line1[2], line1[3])
		total_en.append(energy)
	    if line[10:27] == 'ELECTRONIC ENERGY':
		energy = "%s	%s %s\n"% (str(model), line1[2], line1[3])
		elect_en.append(energy)
	    if line[10:29] == 'CORE-CORE REPULSION':
		energy = "%s	%s %s\n"% (str(model), line1[2], line1[3])
		core_core_rep.append(energy)
	    if line[10:20] == 'COSMO AREA':
		energy = "%s	%s %s\n"% (str(model), line1[2], line1[3])
		cosmo_area.append(energy)
	    if line[10:30] == 'IONIZATION POTENTIAL':
		energy = "%s	%s %s\n"% (str(model), line1[2], line1[3])
		ion_poten.append(energy)
    with open('heat_of_formation.txt', 'w') as results:
	results.writelines(heat_form)
    with open('total_energy.txt', 'w') as results:
	results.writelines(total_en)
    with open('electronic_energy.txt', 'w') as results:
	results.writelines(elect_en)
    with open('core_core_repulsion.txt', 'w') as results:
	results.writelines(core_core_rep)
    with open('cosmo_area.txt', 'w') as results:
	results.writelines(cosmo_area)
    with open('ionization_potential.txt', 'w') as results:
	results.writelines(ion_poten)

def remove_files(models):
    """ Function doc
    """
    os.system('rm *.mop *.out')
    for model in range(1, models):
	os.system('rm ' + 'complex_' + str(model) + '.pdb')

def main():
    """ Main function
    """
    charge = 1
    models = trajectory_splitter(args.trajin)
    create_mop_files(args.method, charge, models)
    mopac_energy(args.method, models)
    write_results(args.method, models)
    remove_files(models)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Calculates different energy terms using MOPAC package.')
    parser.add_argument('-y', '--trajin', type=argparse.FileType('r'), required=True, help='Trajectory file in pdb format')
    parser.add_argument('-m', '--method', help='Method for calculations. Can be "PM6-DH2X","PM6-DH+","PM7" or "PM3". Default "PM3".', default='PM3')
    args = parser.parse_args()
    main()
